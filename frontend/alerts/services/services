// src/services/alerts.service.ts
import { from, Observable } from 'rxjs';
import axiosInstance from "@/lib/axios";

interface FilterOptions {
  districts: Array<{ value: string; label: string }>;
  schools: Array<{ value: string; label: string; district: string }>;
  grades: Array<{ value: string; label: string }>;
}

interface AnalysisSearchCriteria {
  district_code?: string;
  school_code?: string;
  grade_code?: string;
}

class AlertsService {
  private readonly API_PREFIX = '/api';

  constructor() {}

  /**
   * Get all districts
   */
  getDistricts(): Observable<Array<{ value: string; label: string }>> {
    return from(
      axiosInstance.get(`${this.API_PREFIX}/filters/districts`)
        .then(response => response.data)
    );
  }

  /**
   * Get schools, optionally filtered by district
   */
  getSchools(district?: string): Observable<Array<{ value: string; label: string; district: string }>> {
    return from(
      axiosInstance.get(`${this.API_PREFIX}/filters/schools`, {
        params: { district }
      }).then(response => response.data)
    );
  }

  /**
   * Get grades, optionally filtered by district and school
   */
  getGrades(district?: string, school?: string): Observable<Array<{ value: string; label: string }>> {
    return from(
      axiosInstance.get(`${this.API_PREFIX}/filters/grades`, {
        params: { district, school }
      }).then(response => response.data)
    );
  }

  /**
   * Get all filter options at once
   */
  getFilterOptions(): Observable<FilterOptions> {
    return from(
      axiosInstance.get(`${this.API_PREFIX}/filters`)
        .then(response => response.data)
    );
  }

  /**
   * Get analysis data with filters
   */
  getAnalysis(criteria: AnalysisSearchCriteria): Observable<any> {
    return from(
      axiosInstance.post(`${this.API_PREFIX}/analysis`, criteria)
        .then(response => response.data)
    );
  }

  /**
   * Download a report
   */
  downloadReport(reportType: 'summary' | 'detailed' | 'below_85', criteria: AnalysisSearchCriteria): Observable<Blob> {
    return from(
      axiosInstance.post(
        `${this.API_PREFIX}/download/report/${reportType}`, 
        criteria,
        { responseType: 'blob' }
      ).then(response => response.data)
    );
  }
}

export const alertsService = new AlertsService();
